class TrieNode:
    def __init__(self, val):
        self.children = [None for i in range(26)]
        self.val = val
        self.is_end = 0

class MapSum:

    def __init__(self):
        self.root = TrieNode(0)

    def insert(self, key: str, val: int) -> None:
        curNode = self.root

        for char in key:
            idx = ord(char) - ord("a")
            if not curNode.children[idx]:
                curNode.children[idx] =  TrieNode(val)    
            else:
                curNode.children[idx].val += val
            curNode = curNode.children[idx]

        if curNode.is_end:
            oldVal = curNode.is_end
            curNode = self.root
            for char in key:
                idx = ord(char) - ord("a")
                curNode.children[idx].val -= oldVal
                curNode = curNode.children[idx]

        curNode.is_end = val

    def sum(self, prefix: str) -> int:
        curNode = self.root

        for char in prefix:
            idx = ord(char) -  ord('a')
            if not curNode.children[idx]:
                return 0
            curNode = curNode.children[idx]

        return curNode.val


# Your MapSum object will be instantiated and called as such:
# obj = MapSum()
# obj.insert(key,val)
# param_2 = obj.sum(prefix)

class Solution:
    def nearestExit(self, maze: List[List[str]], entrance: List[int]) -> int:
        n = len(maze)
        m = len(maze[0])
        queue = deque([(entrance[0], entrance[1])])
        steps = 0

        while queue:
            curLen = len(queue)
            for _ in range(curLen):
                r, c = queue.popleft()
                if r < 0 or r == n or c < 0 or c == m or maze[r][c] == '+':
                    continue
                    
                if (r == n - 1 or c == m - 1 or r == 0 or c == 0) and steps:
                    return steps

                maze[r][c] = '+'
                queue.append((r - 1, c))
                queue.append((r + 1, c))
                queue.append((r, c - 1))
                queue.append((r, c + 1))

            steps += 1
        return -1
                                         
            

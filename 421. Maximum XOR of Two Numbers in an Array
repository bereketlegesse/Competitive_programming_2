#include <iostream>
#include <vector>
using namespace std;

class TrieNode {
public:
    TrieNode* children[2];
    TrieNode() {
        children[0] = nullptr;
        children[1] = nullptr;
    }
};

class Trie {
private:
    TrieNode* root;

public:
    Trie() {
        root = new TrieNode();
    }

    int insert(int num) {
        int Xor = 0;
        TrieNode* curNode = root;
        TrieNode* ptr = root;

        for (int i = 31; i >= 0; i--) {
            int bit = static_cast<int>((num & (1 << i)) != 0);

            if (ptr && ptr->children[1 - bit]) {
                Xor += (1 << i);
                ptr = ptr->children[1 - bit];
            }
            else if (ptr) {
                ptr = ptr->children[bit];
            }

            if (curNode->children[bit] == nullptr) {
                curNode->children[bit] = new TrieNode();
            }

            curNode = curNode->children[bit];
        }

        return Xor;
    }
};

class Solution {
public:
    int findMaximumXOR(vector<int>& nums) {
        Trie trie;
        int Xor = 0;
        for (int num : nums) {
            Xor = max(Xor, trie.insert(num));
        }

        return Xor;
    }
};


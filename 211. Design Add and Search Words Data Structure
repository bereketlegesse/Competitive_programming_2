class TrieNode:
    def __init__(self):
        self.children = [None for _ in range(26)]
        self.is_end = False

class WordDictionary:

    def __init__(self):
        self.root = TrieNode()

    def addWord(self, word: str) -> None:
        curNode = self.root
        for char in word:
            idx = ord(char) - ord('a')

            if not curNode.children[idx]:
                curNode.children[idx] = TrieNode()
            curNode = curNode.children[idx]

        curNode.is_end = True

    def search(self, word: str) -> bool:
        curNode = self.root

        for i in range(len(word)):
            char = word[i]
            idx = ord(char) - ord('a')
           
            if char != "." and not curNode.children[idx]:
                return False

            if char == ".":
                for j in range(26):
                    if curNode.children[j] and self.search(word[:i] + chr(j + 97) + word[i+1:]):
                        return True
                return False
            
            curNode = curNode.children[idx]

        return curNode.is_end

        


# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)

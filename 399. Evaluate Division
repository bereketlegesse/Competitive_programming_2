class Solution:
    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:
        n = len(equations)
        graph = defaultdict(list)
        output = []
        visited = set()

        for i in range(n):
            start, end = equations[i]
            graph[start].append((end, values[i]))
            graph[end].append((start, 1/values[i]))

        def dfs(node, end):
            if node == end:
                return 1
            if node in visited:
                return -1

            visited.add(node)
            res = -1
            for neighbor, q in graph[node]:
                res = max(res, q*dfs(neighbor, end))
            return res if res > 0 else -1

        for start, end in queries:
            visited = set()
            if start in graph and end in graph:
                output.append(dfs(start, end))
            else:
                output.append(-1)

        return output
        

class Solution:
    def minSwap(self, nums1: List[int], nums2: List[int]) -> int:
        n = len(nums1)
        @cache
        def dp(index, flag):
            if index == n:
                return 0

            if not flag and index > 0:
                if nums1[index] > nums1[index - 1] and nums2[index] > nums2[index - 1]:
                    if nums1[index] > nums2[index - 1] and nums2[index] > nums1[index - 1]:
                        return min(dp(index + 1, 0), 1 + dp(index + 1, 1))
                    return dp(index + 1, 0)

                elif nums1[index] > nums2[index - 1] and nums2[index] > nums1[index - 1]:
                    return 1 + dp(index + 1, 1)

                return n
  
            if nums1[index] > nums2[index - 1] and nums2[index] > nums1[index -  1]:
                if nums1[index] > nums1[index - 1] and  nums2[index] > nums2[index - 1]:
                    return min(dp(index + 1, 0), 1 + dp(index + 1, 1))
                    
                return dp(index + 1, 0)

            elif nums1[index] > nums1[index - 1] and nums2[index] > nums2[index - 1]:
                return 1 + dp(index + 1, 1)

            if index == 0:
                return min(dp(index + 1, 0), 1 + dp(index + 1, 1))
            return n
        
        return dp(0, 0)
            

                

        
